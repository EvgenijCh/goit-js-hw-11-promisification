{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HACMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACPD,EAAQF,KACTA,OAILI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAGjE,OAAOhB,QAAQC,QAAQa,IAGrBX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAK7CH,EAAgBH,EAAO,SACvBG,EAAgBH,EAAO,OAKvBG,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC5BnC,IAIMe,EAAkB,SAAAC,GACpB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC7B,IAN+BC,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMhDnB,YAAW,WACP,IAAMwB,EAAKP,EAAYO,GACJH,KAAKE,SAAW,GAG/BxB,EAAQ,CAAEyB,KAAI5B,UAEdsB,EAAOM,KAEZ5B,OAIL6B,EAAa,SAAC,GAAkB,IAAhBD,EAAgB,EAAhBA,GAAI5B,EAAY,EAAZA,MACtBO,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8C5B,EAA9C,QAGE8B,EAAW,SAAAF,GACbrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAGJR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC7BvB,KAAKoB,GACLI,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC7BvB,KAAKoB,GACLI,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC7BvB,KAAKoB,GACLI,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC7BvB,KAAKoB,GACLI,MAAMH,K","file":"main.b03d795c35265f2c4a4e.js","sourcesContent":["\r\nconst delay = ms => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms);\r\n    });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger);\r\ndelay(1000).then(logger);\r\ndelay(1500).then(logger);","\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n\r\n    return Promise.resolve(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\ntoggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n    return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n        setTimeout(() => {\r\n            const id = transaction.id;\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve({ id, delay });\r\n            } else {\r\n                reject(id);\r\n            }\r\n        }, delay);\r\n    });\r\n};\r\n\r\nconst logSuccess = ({ id, delay }) => {\r\n    console.log(`Transaction ${id} processed in ${delay} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}